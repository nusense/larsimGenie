#include "genie.fcl"

#include "services_dune.fcl"
#//uboone//#include "services_microboone.fcl"
#//uboone//#include "time_memory_tracker_microboone.fcl"

#//debug//#include "GenieOutput.fcl"

process_name: GenieNDK

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "prodndk.hist.root" }
  TimeTracker:           {} ##  @local::microboone_time_tracker
  MemoryTracker:         {} ##  @local::microboone_memory_tracker
  RandomNumberGenerator: {} # ART native random number generator
  @table::dunefd_services
  #//uboone//# @table::microboone_services
}

services.Geometry: @local::dune10kt_1x2x6_geo
#//uboone//# services.Geometry:  @local::microboone_geo

# Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.

physics:
{

  producers:
  {
    generator: @local::standard_ndk
    rns:       { module_type: "RandomNumberSaver" }
  }

#//debug//#
##  analyzers:
##  {
##    outputgenie:  @local::standard_genie_output
##  }

  # define the producer and filter modules for this path, order matters,
  # filters reject all following items.
  # see lines starting physics.producers below
  simulate: [ rns, generator ]

  # define the output stream, there could be more than one if using filters
  #//production//#
  stream1:  [ out1 ]
  #//debug//# stream1:  [ outputgenie, out1 ]

  # trigger_paths is a keyword and contains the paths that modify
  # the art::event, ie filters and producers
  trigger_paths: [ simulate ]

  # end_paths is a keyword and contains the paths that do not modify
  # the art::Event, ie analyzers and output streams.
  # these all run simultaneously
  end_paths:     [ stream1 ]

}

# block to define where the output goes.  if you defined a filter in the
# physics block and put it in the trigger_paths then you need to put a
# SelectEvents: {SelectEvents: [XXX]} entry in the output stream you
# want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "genie_ndk.art.root" # default file name
       # can override from command line with -o or --output
 }
}

#//debug//#
## physics.analyzers.outputgenie.dumpFilePattern:  "std::cout"
## physics.analyzers.outputgenie.dumpGeniePrintLevel:   3

#### physics.analyzers.outputgenie.dumpMCTruth:  true
#### physics.analyzers.outputgenie.dumpGTruth:   true
#### physics.analyzers.outputgenie.dumpMCFlux:   true

