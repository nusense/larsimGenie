#include "seedservice.fcl"
#include "genie_eventweight.fcl" 

process_name: GenieEventWeightTest

services: {
  # Make all uncaught exceptions fatal.
  scheduler: { defaultExceptions: false }

  # Provides random numbers needed for the "multisim" reweighting strategy
  NuRandomService: @local::random_NuRandomService

  # art native random number generator
  RandomNumberGenerator: {}

  # NOTE: the GenieEventWeight class currently does not make any analysis
  # histograms. It might be useful to add this functionality at some point for
  # diagnostic purposes.
  # Load the service that manages root files for histograms.
  #TFileService: { fileName: "genie_reweight_hist.root" }
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1 # Number of events to create (-1 means "process all of them")
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers: {
   genieeventweightTest: @local::genie_eventweight
   rns: { module_type: "RandomNumberSaver" }
 }

 # Define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 # Define the producer and filter modules for this path, order matters,
 # filters reject all following items.
 simulate: [ rns, genieeventweightTest ]

 trigger_paths: [ simulate ]

 # end_paths is a keyword and contains the paths that do not modify the
 # art::Event, i.e., analyzers and output streams. These all run simultaneously
 end_paths:     [ stream1 ]  
}

# Block to define where the output goes. If you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents:
# {SelectEvents: [XXX]}
# Entry in the output stream you want those to go to, where XXX is the label of
# the filter module(s)
outputs: {
  out1: {
    module_type: RootOutput
    # default file name, can override from command line with -o or --output
    fileName:    "%ifb_%tc_rewgt.root"
    dataTier:    "reconstructed"
    compressionLevel: 1
  }
}
